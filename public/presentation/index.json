[{"content":"I\u0026rsquo;ll be right back\u0026hellip; Since you’re reading this blog post, I’m going to assume that you are my audience of a casual blog reader. As you can see that I have upgraded the blog and there's still a fair bit of work to be done. ie: updating my old blog posts, contact me page, search index, etc... I've got something special to show you guys. I can't wait to show you. I'll be right back... In the meantime why don't you go for a walk. Have Great Day!! :) Here it is.. 5 Great Reasons You Should Take a Walk Today\n","description":"","id":2,"section":"posts","tags":["Technology"],"title":"Website Update","uri":"https://brawnytechie.com/website-update/"},{"content":"I attend my first Python conference last weekend. It was the NZ python user group’s tenth national python conference. Everything was just great and awesome; I made a lot of friends also learn a lot. Going to a conference full of people who love the same thing as myself is always a fun experience. There’s so much more to PyCon than just a bunch of people talking about the Python language. Everyone who attends PyCon may have a different experience, and that’s what makes the conference truly unique right!\nHere is a microscopic summary of the talks I picked. I tried to summerise the talk, linked to the YouTube videos and GitHub accounts to one post what wiser ones speak at the conference. I would share some of the notes that I’ve taken over the conference to help you get the most out of my PyCon experience in a future post.\n1. A Beginners Intro to the Flask Web Framework from Steve Dunford In my opinion, the flask is probably the best web framework out there and we should consider learning and using it in 2019. Flask is perfect for beginners that want to get started as quickly as possible and also for a more experienced developer who craves freedom and flexibility. Steve went over how to make a simple data-backed website with Python. He covered how to combine Flask, SQLite, HTML, CSS, and some common flask add-ons to make a very simple version of IMDB. Here is the code snippet I practiced and the Pdf version of the Tutorial.NOTE: All credit to Steve Dunford giving permission to share the tutorial.\n2. Python Debugging: Pro Tips and Not-So-Obvious by Dave Glover Following Dave’s tutorials was great. I got exposure to new skills and made me crave dig more into Python in the cloud. Also, debugging tips are massive eye-opener too. Basically, in the first half, he talked about debugging remote python in environments such as Circuit Python, Raspberry Pi, Docker containers, remote Linux Servers, and Jupyter Notebooks. Then went over how to sync code to devices, attach debuggers, and step through code.\n It’s the tutorial time!\n Second half he went through how to configure Visual Studio Code to be a powerful and productive development environment that enables us to quickly and easily create and debug Python apps and how to develop scalable web applications using Django and PostgreSQL, and deploy them to the cloud on Azure in just a few clicks.Here is Dave’s Git hub account where he shares both of the labs.\n3. The Natural State of Computers by Amber Brown Asynchronous programming has been gaining a lot of attention in the past few years, and for good reason. Although it can be more difficult than the traditional linear style, it is also much more efficient. Amber Brown, a core developer and release manager from a twisted asynchronous networking library went over how does this Asynchronous programming solve the problems. During her talk, she investigates that the common tasks that we as a developer implement, we can find which ones are made easier with asynchronous techniques, and which ones are made more difficult. Check here for Amber’s talk.\nAsync isn’t just nice. It’s essential. What is driving for a good Async story? I think the reason is computers are simply not getting faster. we have to be more efficient. Lot of networking based workloads, asynchronous I/O is far more efficient than traditional blocking regime\u0026rdquo;\n - Amber Brown  4. Python product dev tools for electronics by Barrie Duncan Product developers spend a lot of time interacting with various tools which are vital to the development phase. Whether it’s software, a mobile app, or hardware we are developing, these tools are critical to the success of our project. During the Barrie Duncan’s talk, he went over how the Python Numba package had been key to developing a simulator of new motor technology they invented. Basically, Numba allows them to optimize a lot of code into c code. Rather than write a program specific to the problem, he picked instead to write a general-purpose, although simple, code generator tool. It solved the problem of managing small chunks of generator code sprinkled throughout a large collection of files. Then use this general-purpose tool to solve a specific generation problem was one of his approaches to solving problems we face in the development environment.\n Barrie Duncan about to start his presentation\n Also, check how he describes how Jenkins helped them create an automation test system for helping to validate their product development and how Jenkins offers a simple way to set up continuous integration and continuous delivery environment for almost any combination of languages and source code repositories. Check what Barrie share here at the conference.\n5. How to Write Python Code Others Like to Use by Anna Tisch In the last decade, SDK usage has become a major part of the development lifecycle. In fact, it is so commonly used and integrated into products, that one would say developers need to acquire more knowledge with many frameworks rather than learning deep algorithms to implement by themselves. Anna Tisch from Microsoft mainly addressed those who want to learn how to write the best SDK and supply documentation for it. The goal/orientation of an SDK is that its documentation should be focused and clear. Throughout her talk, she went over various best practices we wanted to follow. Check here what Anna share at the conference.\n6. Getting started with MicroPython on a microcontroller from Glenn Ramsey MicroPython is a subset of the Python 3 language that has been pared down to run efficiently on several microcontrollers. If we are familiar with Python or looking for a quick way to write code for a microcontroller (that isn’t C/C++, Arduino, or assembly), Micro Python is a good option. During Glenn’s talk, he talks/ demonstrated live about getting MicroPython installed on an ESP32 development and how to create a sound meter with visual output. Trust me!! this is a nice fun project to do on one nice weekend while sipping a beer!! Check here what Glenn share at the conference.\n7. Building an interactive training environment using JupyterHub” from Graham Dumpleton Before Graham Dumpleton’s talk, I didn’t know that we can use JupyterHub to spawn applications other than Jupyter notebooks In this talk he walked through what JupyterHub is and how it works. Also, guide us on how JupyterHub was used to implement a multi-user workshop environment running in Kubernetes. Basically, Instead of creating Jupyter notebooks, JupyterHub was used to create user environments in Kubernetes which gave the user access to an interactive Linux shell environment in their web browser, along with workshop course notes and presenter slides, in the same integrated dashboard view. Because the user environment provided all the tools required for the workshop, users were immediately good to go, with no need to install anything locally on their own computer. Check here How Graham share his expertise at the conference\n8. Automate Your Integration Tests Using pytest-docker-compose from Phoenix Zerin Docker containers opened a world of possibilities for the tech community, hassles in setting up new software were decreased unlike old times when a mess was to be sorted by a grievous format, it reduced the time to set up and use new software which eventually played a big part for techies to learn new things, roll it out in a container and scrap it when done. Things became easy, and the best thing its open-source anyone, and everyone can use it, comes with a little learning curve though. The possibility of defining a complex stack in a file and running it with a single command, pretty tempting huh! The guys at Docker Inc. choose to call it Docker compose. Check here what Phoenix wants to teach us how to automate our integration testing using pytest Docker compose. Learned a lot!! Wort a check his talk!\nSometimes unit tests aren\u0026rsquo;t enough, and we need to actually deploy our solution to see how it behaves as a whole. Utilities like docker-compose make it easy to stand up an entire environment, but the actual testing part still has to be done manually\u0026hellip; or does it? “\n -Phoenix Zerin  9. From NASA to Startups to Big Commerce by Daniel Roy Greenfeld Daniel Roy Greenfield’s talk was inspirational as well as very informative. Daniel is the Vice President at BriteCore, Co-author of the Two Scoops of Django also Creator of numerous large open-source projects such as Cookiecutter Django. His talk was all about how important it is to focus on the moment instead of always thinking and planning ahead (something I’m guilty of).\nKISS: keep it simple, stupid.\n Kelly Johnson  So what should Daniel tell us about KISS? It really just means we have to keep it simple. Simple code is less prone to bugs and is easier to read and understand for us and the people who’ll be working on the code in the future (including ourselves). And now you’re probably thinking you’re already doing that. Duh, why would you write complex code? Maybe you even think of yourself as not being a good enough programmer to write complex code! See his talk here…\n10. Turning ‘wat’ into ‘why’ by Katie McLaughlin There many different programming languages. Yes, it is true that we can create a website using Ruby, Java, Python, C#, Go, or JavaScript. You can use C or C++ or Haskell or Rust. Or COBOL or Pascal or Perl. Underlying this fact is that all of these languages serve the same purpose: to turn human thoughts into the 1’s and 0’s that the computer understands. In highfalutin computer terms, they are all “Turing complete”. At their most foundational level, these languages are all the same. But on the surface. where humans interact with them vary a lot. In this talk, Katie takes us a tour of a dozen different programming languages, from JavaScript to Haskell, Python to Perl, Elixir and more; and see not only the ‘wat’, but the ‘why’: is it a misunderstanding based on an assumption from another programming language? A compiler optimisation? A known bug that can’t be fixed due to backward compatibility concerns. Check her talk here. Guaranteed you enjoy and learn something!!\n11. The Packaging Lifecycle with Poetry by Clinton Roy Clinton walks us through Poetry, Python dependency management tool with a very soothing pace. Based On the Poetry git hub page, the main reason to create poetry is; Packaging systems and dependency management in Python are rather convoluted and hard to understand for newcomers. Even for seasoned developers, it might be cumbersome at times to create all files needed in a Python project:setup.py, requirements.txt, setup.cfg, MANIFEST.in and the newly added Pipfile\n- Poetry Git Hub Page  This is really true that there are many files we should consider such as:  Setup.py Requirements.txt Setup.cfg MANIFEST.in Pipfile and Pipfile.lock (pipenv)  To solve this messy situation, Poetry comes here for us with only one pyproject.toml file to manage all the dependencies. This talk aims to look at some of the ways Poetry moves the conversation forward, learns from other packaging ecosystems, and where Python itself is going. Check here for Clinton’s talk!\n Woop! Woop! Free food was served all the 3 days of the conference\n 12. Build and hack your own IoT with MQTT by Agnetha Korevaar Today, we hear a lot about IoT, which stands for the internet of things. All these smart boxes, light bulbs, shades, thermostats, voice assistants, and smart machines are slowly sneaking into our households, businesses, and industrial environments. It’s a logical and inevitable next step, as we include more devices in our homes, that we develop some way to control them.\nWhen implementing the MQTT protocol, users set up a server. For consumers, the server usually lives on a PC or a mini-computer such as Raspberry Pi, to which devices can connect to and communicate with. While the MQTT protocol itself is secure, if implemented and configured incorrectly, severe security issues can arise. Agneta guides us to build our own IoT system and hack it to find out its weaknesses. Very informative!! Check here for her talk.\n","description":"","id":8,"section":"posts","tags":["Data Science","Technology"],"title":"Microscopic Summary About My First Pycon","uri":"https://brawnytechie.com/kiwi-pycon-2019/"},{"content":"You can call me Chad. I’m a data scientist and software engineer with a strong background in computer science, programming, machine learning, and embedded system engineering. These days, I work remotely as a data scientist with \"The Clinician\"(The company behind the ZEDOC outcomes measurement platform.One of the leading provider of data and analytics technology and services to healthcare organizations), but this blog, its content, and opinions are my own. I blog about data science, technology, culture, gadgets, code, the web, where we’re going and where we’ve been. I’m excited about community, social equity, media, entrepreneurship, and above all, the open web. I have a Master of Software Development and Bachelor of Electronics and Computer System Degree from Victoria University of Wellington.Also an Electrotechnology Diploma from Wellington Institute of technology. I have been selected as one of the best 25 engineering students in New Zealand by Institution of Professional Engineers New Zealand (IPENZ) to take part in Engineering Leaders Today for Engineering Leaders Tomorrow conference in 2013.\nI believe the best way to change the world is in concentric circles: start with yourself and work your way out from there. If you get yourself sorted out, then that is one less person for the world to worry about. You’ll be in a position to contribute rather than consume. You will add order rather than disorder.\nI don’t merely write about things. Along the way, I like to try out the concepts for myself as I experiment with building better habits as an entrepreneur, programmer, and lifelong learner. In the end, my work ends up being one-part storytelling, one-part academic research, one-part personal experiment. It’s a colourful blend of inspirational stories, academic science, hard-earned wisdom.\nI don’t claim to have all the answers and I still have a lot to learn,but I’m happy to share what I’ve learned along the way.If you just want to email me, go ahead flick me message via contact me page.but be nice and make sure you Googled around a bit before you do..\n","description":"Hugo, the world’s fastest framework for building websites","id":9,"section":"","tags":null,"title":"About me","uri":"https://brawnytechie.com/about/"},{"content":"To answer this question, we have to consider what data science and big data can do for the average citizen: The results of data science are already working their magic in our day to day lives. Have you ever looked for a t-shirt online and found related advertisements on Facebook and other websites continuously for a week? Or say, you’re chatting with your friend and the keyboard suggests you the exact words that you want to use in your sentence? How does YouTube show all your favorite videos on your home screen?\nData Science has really pulled the ends between fiction and technology. Right from LinkedIn to Tinder, data science is being used everywhere. Well, these are all the applications of Data Science. Over the last few years, Data Science has really changed our concept of technology. I see our lives a lot easier as compared to 10 years ago, and this is all because of data science. Data Science has really pulled the ends between fiction and technology. Right from LinkedIn to Tinder, data science is being used everywhere. Data science is not restricted to big data, which in itself is a big field because big data solutions are more focused on organizing and pre-processing the data rather than analysing the data.\nWhy Data Science Remain An Integral Part Of The Culture And Economy Of The Global World Here are a few reasons why data science will always remain an integral part of the culture and economy of the global world:\n1. Data science helps brands to understand their customers in a much enhanced and empowered manner. Customers are the soul and base of any brand and have a great role to play in their success and failure. With the use of data science, brands can connect with their customers in a personalized manner, thereby ensuring better brand power and engagement.\n2. One of the reasons why data science is gaining so much attention is because it allows brands to communicate their story in such an engaging and powerful manner. When brands and companies utilize this data in a comprehensive manner, they can share their story with their target audience, thereby creating better brand connect. After all, nothing connects with consumers like an effective and powerful story, that can inculcate all human emotions.\n3. One of the most important aspects of data science is that its findings and results can be applied to almost any sector like travel, healthcare, and education among others. Understanding the implications of data science can go a long way in helping sectors to analyse their challenges and address them in an effective fashion.\n4. Data science is accessible to almost all sectors. There is a large amount of data available in the world today and utilising them in a proper manner can spell success and failure for brands and organizations. Utilizing data in a proper manner will hold the key to achieving goals for brands, especially in the coming times.\nSoon data science plans to be at the core of the digital world. But we need to understand that Data Science is only to make our lives simpler and not replace things. Data Science might make technologies that can perform a medical operation without scissors, but it can never make technologies that can perform a medical operation without a doctor.\n","description":"","id":10,"section":"posts","tags":["Data Science","Technology"],"title":"What’s this Hot Fuzz about Data Science","uri":"https://brawnytechie.com/hot-fuzz-about-data-science/"},{"content":"Companies are making efforts to calculate barbell path and system performance with the body and barbell, and even measure for the rate of force. Barbell speed trackers allow us to account for this: they provide an instant, measurable metric that can be used to determine how much should actually be lifted. If we feel fatigued and sluggish but are actually moving the barbell at a good speed, this information becomes invaluable. Instead of dropping weight or calling it early, we can go up in weight. Compounding from session to session, this small percentage gain can make a huge difference in the course of a training cycle. Coming from an Embedded background I always wanted to make my own Velocity Based Training(VBT) device to track my training progress.Obviously, it needed to be a low-cost, accurate, and reliable platform to measure important information about barbell exercises. OpenBarbell from Squat and science is one of the accurate devices in the market. Their OpenBarbell version 1 unit is open-source. My Approach to Open Source Embedded Project So I decided to dig this project and make my own barbell VBT unit. Even though the original project is 5,6 years old. Open barbell GitHub account is still live with the all the PCB,3D mechanical drawings.\nAfter research the project I found that most of the components were obsolete. So I straight downloaded the project from GitHub and see if I could hack the code. I found all the libraries and whatnot (this part will discuss in the future how I go with Arduino C and their mobile app.) The next mission is to find the obsolete component. After sniffing few electronic forums I managed to found that if I dig deep from electronic manufacturers in Hong Kong, China and the US we may have a chance. After 2 months and about 20 emails, I found a lead that a couple of manufacturers in China have the main microcontroller(RFDauino) which is the ‘brain’ of the Open barbell. What Went Wrong Things started to fall from here.I was too lazy maybe too dumb.Haven’t check Open-barbell old PCB file. Straight contacted the one manufacture in China and asked them to manufacture the board, sending the fresh Gerber file I made from the OpenBarbell Git-hub account.Paid for 3 board to populate. It took four weeks to manufacture the board. After a hefty customs charge from NZ custom, boards were finally on my hand.\nI was over the moon! It was time to test the board! I fired up the board. None of them were alive means that fun time starts. Its fault-finding time. Alright peeps this is what I learn from this part of the project.Their Schematics missing the two capacitors also BOM I download from git have resistor and capacitor values are mismatch from the schematic diagram! Am I screwed! Not really but should have done better if I follow the below steps. Here I am making my own standard for my next Open source Embedded project: What Can We Learn From My Mistakes  Check the availability of software libraries and understand the code. (which I have done for this one) If the project has a mechanical side how feasible how easily we can build it. (Already done this one) Always check the schematic make sure you understand the whole circuit. Download all the data sheets and see the schematics are correct! (This where I missed) Check the Gerber file before you send it to manufacture. Alaways Try to populate the board myself if SMD Components aren’t too small! (I was lazy for this project. Should have save that hefty custom Fee, component populate charge if I solder the board in the house)  What am I gonna do now? Well, debug the board sigh!!Stay tuned how I debug the board…You’ll learn something…also basic mechanism of this open barbell project is that the conveying draw-string mechanism through an encoder wheel. Check encoder basics if you want to learn more about encoders.\nPart 2: To be continued\u0026hellip;.\n","description":"","id":11,"section":"posts","tags":["Gadgets","Technology"],"title":"I Screw Up My First Open Barbell","uri":"https://brawnytechie.com/open-barbell/"},{"content":"I have come across encoders in my internship projects also personal projects such as Open barbell. Thought its better to draw something in a pencil regarding encoders which will help me to understand more about encoders while you can learn something too.\nThe most common encoders are incremental encoders, for two main reasons. First, the information supplied by an incremental encoder is sufficient for most applications. The second reason is just a matter of economics and simplicity: it is much more cost-effective to manufacture an incremental encoder than an absolute encoder. An incremental encoder can be used in positioning and motor speed feedback applications which includes servo/light, industrial or heavy-duty applications.\nThe above picture shows the very basic structure of an incremental encoder. It only involves a disk with one slot, an LED, and a photosensor. The detector provides an output each time it “sees” the LED.\nThe first information an incremental encoder display is its output is distance. As the above disk rotates, each time the slot is aligned with the LED and detector, the detector produces an output. When the disk rotates through 360-degree mechanical degrees, the controller can use this information to calculate the distance traveled in a system.\nThe second information an incremental encoder display is its output is velocity. the encoder essentially acts as a tachometer. As the disk in our first drawing above rotates, each time the slot is aligned with the LED and detector, the detector produces an output. The number of outputs in a minute would be the RPM or speed of the disk.\nHow about with 10 slots and 10 teeth, the optical sensor can now provide an output while the disk turns through 18 mechanical degrees and a slot is in front of the sensor. During the next 18 degrees, a tooth will block the light, and the optical sensor will provide no output.\nMost applications need an output when the movement is much less than 18 degrees, so disks are made with much finer increments. The technical term used to define the size of increments used is resolution. I will discuss a resolution in more detail in a future post but for now, we can define it as the number of outputs provided by the encoder based on the number of lines or windows on the disk.\nAbove drawing indicative of what that single output might look like on an oscilloscope. The bottom of the drawing represents an output of zero volts. The top of the drawing represents an output of five volts. The complete drawing is showing the changes in output or cycles as the disk rotates. When the sensor sees the LED, the output goes high (5 volts); when the disk via the line prevents the sensor from seeing the LED, the output goes low (0 volts).\nOne complete electrical cycle starts when the output goes high and ends just before it goes high again. One electrical cycle is 360 electrical degrees. For every mechanical revolution, the number of electrical cycles will be equivalent to the resolution or lines and windows on the disk. Although we are able to calculate both distances moved and velocity from a single encoder output, one other piece of information provided by incremental encoders is the direction of travel. In a future post, this will continue this discussion and explain how direction can be determined. This is just for a basic understanding of what and how incremental encoders work. Let me know if I made a mistake in the above post.. more than happy change or learn more…\n","description":"","id":12,"section":"posts","tags":["Gadgets","Technology"],"title":"Encoder Basics","uri":"https://brawnytechie.com/encoder-basics/"}]